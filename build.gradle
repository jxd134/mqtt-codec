import org.gradle.api.publish.maven.internal.artifact.FileBasedMavenArtifact

plugins {
    id "java-library"
    id "signing"
    id "maven-publish"
    id 'jacoco'
    id "me.champeau.gradle.jmh" version "0.5.0"
    id "net.researchgate.release" version "2.8.1"
    id "com.jfrog.bintray" version "1.8.4"
    id "com.github.spotbugs" version "3.0.0"
    id "com.github.hierynomus.license" version "0.15.0"
    id "com.jfrog.artifactory" version "4.14.1"
}

group = "io.rapidw.mqtt"
description = "Rapidw MQTT codec"

String getProp(String name) {
    if (hasProperty(name)) {
        return properties[name]
    } else {
        String env = System.getenv("some_prop")
        if (env != null) {
            return env
        } else {
            return ""
        }
    }
}

ext {
    url = "https://github.com/rapidw/mqtt-codec"
    vcsUrl = "${url}.git"
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.slf4j:slf4j-api:1.7.30"
    api "io.netty:netty-codec:4.1.45.Final"

    testImplementation "ch.qos.logback:logback-classic:1.2.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
    testImplementation "org.assertj:assertj-core:3.11.1"

    jmh "io.netty:netty-codec-mqtt:4.1.45.Final"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

license {
    header project.file("gradle/license-header")
}

javadoc {
    options {
        encoding = "UTF-8"
        locale "en_US"
        jFlags "-Duser.language=en_US"
    }

    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "$group:${project.name}"
                description = project.description
                url = project.url

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        name = "pvtyuan"
                        email = "pvtyuan@foxmail.com"
                    }
                }

                scm {
                    connection = "scm:git:${project.vcsUrl}"
                    developerConnection = "scm:git:${project.vcsUrl}"
                    url = project.url
                }
            }
        }
    }
}

// include pom in jar
jar {
    into("META-INF/maven/$project.group/$project.name") {
        from generatePomFileForMavenJavaPublication
        rename ".*", "pom.xml"
    }
}

release {
    failOnUnversionedFiles = false
    pushReleaseVersionBranch = "master"
}

bintray {
    user = getProp("bintrayUser")
    key = getProp("bintrayKey")

    publish = true
    override = true

    pkg {
        repo = "maven"
        name = project.name
        userOrg = "rapidw"
        licenses = ["Apache-2.0"]
        vcsUrl = project.vcsUrl

        version {
            name = project.version

            gpg {
                sign = true
                passphrase = getProp("signing.password")
            }

            mavenCentralSync {
                sync = true
                user = getProp("nexusUsername")
                password = getProp("nexusPassword")
                close = "1"
            }
        }
    }

    publications = ["mavenJava"]
}

// workaround for upload gradle module metadata to bintray
project.tasks.withType(com.jfrog.bintray.gradle.tasks.BintrayUploadTask) {
    doFirst {
        publishing.publications.withType(MavenPublication).each { publication ->
            File moduleFile = project.buildDir.toPath()
                .resolve("publications/${publication.name}/module.json").toFile()

            if (moduleFile.exists()) {
                publication.artifact(new FileBasedMavenArtifact(moduleFile) {
                    @Override
                    protected String getDefaultExtension() {
                        return "module"
                    }
                })
            }
        }
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
    ignoreFailures = true
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'oss-snapshot-local'   //The Artifactory repository key to publish to
            username = bintrayUser        //The publisher user name
            password = bintrayKey       //The publisher password or API key
        }
        defaults {
            publications 'mavenJava'
            ////List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
            publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
            publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
            publishPom = true   //Publish generated POM files to Artifactory (true by default).
            publishIvy = false   //Publish generated Ivy descriptor files to Artifactory (true by default).
        }
    }
}

afterReleaseBuild.dependsOn bintrayUpload
